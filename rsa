#!/usr/bin/env python3

import sys
import random
import math
from concurrent.futures import ThreadPoolExecutor

def is_prime(n):
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    w = 2
    while i * i <= n:
        if n % i == 0:
            return False
        i += w
        w = 6 - w
    return True

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pollards_rho(n, iterations_limit=10000):
    if n % 2 == 0:
        return 2
    x = random.randint(2, n - 1)
    y = x
    c = random.randint(1, n - 1)
    d = 1
    i = 0
    while i < iterations_limit and d == 1:
        x = (x * x + c) % n
        y = (y * y + c) % n
        y = (y * y + c) % n
        d = gcd(abs(x - y), n)
        i += 1
    return d if d != n else None

def get_factors(n):
    if is_prime(n):
        return n, 1
    factor = pollards_rho(n)
    if factor and factor != n:
        return factor, n // factor
    return n, 1

def factorize_and_print(number):
    p, q = get_factors(number)
    if p > q:
        p, q = q, p
    print(f"{number}={p}*{q}")

def main(filename):
    try:
        with open(filename, "r") as file:
            numbers = [int(num_str) for line in file for num_str in line.strip().split(', ')]
        with ThreadPoolExecutor() as executor:
            executor.map(factorize_and_print, numbers)
    except FileNotFoundError:
        print(f"Error: Can't open file {filename}")
        sys.exit(1)
    except ValueError as e:
        print(f"Invalid number format: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: ./rsa <file>")
        sys.exit(1)
    main(sys.argv[1])
